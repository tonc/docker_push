# name: Smart Multi-Arch Sync

# on:
#   workflow_dispatch:
#   schedule:
#     - cron: '* */3 * * *'


# jobs:
#   sync:
#     runs-on: ubuntu-latest
#     steps:

#     # 增加可用磁盘空间
#     - name: Maximize build space
#       uses: easimon/maximize-build-space@master
#       with:

#         root-reserve-mb: 2048
#         swap-size-mb: 128
#         remove-dotnet: 'true'
#         remove-haskell: 'true'
#         # 如果空间还是不够用，可以把以下开启，清理出更多空间
#         remove-android: 'true'
#         remove-codeql: 'true'
#         build-mount-path: '/var/lib/docker/'

#     - name: Restart docker
#       run: sudo service docker restart

#     - name: 检出代码
#       uses: actions/checkout@v4
      
#     # 登录到 cnb
#     - name: 登录到 cnb
#       run:
#           docker login docker.cnb.cool -u cnb -p ${{ secrets.cnb }}

#     - name: Setup Buildx
#       uses: docker/setup-buildx-action@v3
#       with:
#         platforms: linux/amd64,linux/arm64,linux/arm/v7

#     - name: Process Images
#       run: |
#         while IFS= read -r line; do
#           # Skip comments/empty lines
#           [[ "$line" =~ ^#|^$ ]] && continue

#           # Parse input
#           src_image=$(echo "$line" | awk '{print $1}')
#           dest_image=$(echo "$line" | awk '{print $2}')
#           platforms=$(echo "$line" | awk '{print $3}' | tr ',' ' ')

#           echo "🔍 Processing: $src_image => $dest_image (${platforms// /,})"

#           # Step 1: Pull multi-arch image
#           docker pull --platform=$(echo "$platforms" | tr ' ',',') $src_image

#           # Step 2: Push each arch with clear tagging
#           for arch in $platforms; do
#             arch_suffix=$(echo $arch | sed 's/\//-/g')  # arm/v7 => arm-v7
#             temp_tag="${dest_image}-${arch_suffix}-temp"
            
#             docker tag $src_image $temp_tag
#             docker push $temp_tag
#           done

#           # Step 3: Create unified manifest
#           manifest_cmd="docker manifest create ${dest_image}"
#           for arch in $platforms; do
#             arch_suffix=$(echo $arch | sed 's/\//-/g')
#             manifest_cmd+=" --amend ${dest_image}-${arch_suffix}-temp"
#           done
#           eval $manifest_cmd

#           # Step 4: Push final manifest
#           docker manifest push $dest_image

#           # Step 5: Cleanup temporary tags
#           for arch in $platforms; do
#             arch_suffix=$(echo $arch | sed 's/\//-/g')
#             docker rmi ${dest_image}-${arch_suffix}-temp || true
#           done

#           echo "✅ Successfully pushed multi-arch: $dest_image"
#         done < images.txt
name: Smart Multi-Arch Sync with Update Check

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */3 * * *'  # 每3小时运行一次

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    # 增加可用磁盘空间
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'
        remove-haskell: 'true'
        remove-android: 'true'
        remove-codeql: 'true'
        build-mount-path: '/var/lib/docker/'

    - name: Restart docker
      run: sudo service docker restart

    - name: 检出代码
      uses: actions/checkout@v4
      
    # 登录到 cnb
    - name: 登录到 cnb
      run: |
        docker login docker.cnb.cool -u cnb -p ${{ secrets.cnb }}

    - name: Setup Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64,linux/arm/v7

    - name: Process Images with Update Check
      run: |
        set -e  # 出现错误时退出
        
        # 获取当前时间戳用于临时标签
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        
        while IFS= read -r line; do
          # 跳过注释/空行
          [[ "$line" =~ ^#|^$ ]] && continue

          # 解析输入
          src_image=$(echo "$line" | awk '{print $1}')
          dest_image=$(echo "$line" | awk '{print $2}')
          platforms=$(echo "$line" | awk '{print $3}' | tr ',' ' ')

          echo "🔍 Processing: $src_image => $dest_image (${platforms// /,})"

          # 检查源镜像是否有更新
          NEED_UPDATE=false
          LATEST_DIGEST=$(docker manifest inspect $src_image | jq -r '.config.digest')
          
          # 尝试获取目标镜像的当前digest
          if docker manifest inspect $dest_image &> /dev/null; then
            CURRENT_DIGEST=$(docker manifest inspect $dest_image | jq -r '.config.digest')
            if [ "$LATEST_DIGEST" != "$CURRENT_DIGEST" ]; then
              NEED_UPDATE=true
              echo "🔄 Update detected for $src_image"
            else
              echo "✅ $dest_image is already up-to-date"
              continue
            fi
          else
            NEED_UPDATE=true
            echo "🆕 $dest_image does not exist, will create"
          fi

          if [ "$NEED_UPDATE" = true ]; then
            # 创建manifest命令
            manifest_cmd="docker manifest create ${dest_image}"
            
            # 处理每个平台
            for platform in $platforms; do
              # 拉取指定平台的镜像
              docker pull --platform=$platform $src_image
              
              # 使用时间戳创建临时标签
              temp_tag="${dest_image}-${TIMESTAMP}-$(echo $platform | sed 's/\//-/g')"
              docker tag $src_image $temp_tag
              docker push $temp_tag
              
              # 添加到manifest
              manifest_cmd+=" --amend $temp_tag"
              
              # 清理
              docker rmi $src_image $temp_tag || true
            done

            # 创建并推送manifest
            eval $manifest_cmd
            docker manifest push $dest_image

            # 清理旧的临时镜像
            docker system prune -a -f

            echo "✅ Successfully updated multi-arch: $dest_image"
          fi
        done < images.txt

    - name: Clean up
      run: |
        docker system prune -a -f