name: Smart Multi-Arch Sync (Latest Only)

on:
  workflow_dispatch:
  schedule:
    - cron: '*/30 * * * *'  # 每半小时运行一次

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      # 登录到镜像仓库
      - name: 登录到 cnb 镜像仓库
        run: |
          docker login docker.cnb.cool -u cnb -p ${{ secrets.cnb }}

      # 设置 Buildx
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64,linux/arm/v7

      # 安装必要工具
      - name: 安装 jq
        run: sudo apt-get install -y jq

      # 核心镜像同步逻辑
      - name: 多架构镜像同步
        run: |
          set -eo pipefail
          
          # 创建临时构建器
          docker buildx create --name multiarch --use
          docker buildx inspect --bootstrap

          while IFS= read -r line; do
            # 跳过注释和空行
            [[ "$line" =~ ^#|^$ ]] && continue

            # 解析输入行
            src_image=$(echo "$line" | awk '{print $1}')
            dest_image=$(echo "$line" | awk '{print $2}')
            platforms=$(echo "$line" | awk -F'[ ,]+' '{print $3}' | tr ',' ' ')
            
            echo "🔍 正在处理: $src_image => $dest_image [平台: $platforms]"

            # 检查源镜像是否有更新
            NEED_UPDATE=false
            if ! LATEST_DIGEST=$(docker manifest inspect "$src_image" 2>/dev/null | jq -r '.config.digest'); then
              echo "❌ 无法获取源镜像清单: $src_image"
              continue
            fi

            # 检查目标镜像是否存在
            if docker manifest inspect "$dest_image" &>/dev/null; then
              CURRENT_DIGEST=$(docker manifest inspect "$dest_image" | jq -r '.config.digest')
              if [ "$LATEST_DIGEST" != "$CURRENT_DIGEST" ]; then
                NEED_UPDATE=true
                echo "🔄 检测到更新: $src_image (旧: ${CURRENT_DIGEST:0:12} → 新: ${LATEST_DIGEST:0:12})"
              else
                echo "✅ $dest_image 已是最新"
                continue
              fi
            else
              NEED_UPDATE=true
              echo "🆕 目标镜像不存在，将创建: $dest_image"
            fi

            if [ "$NEED_UPDATE" = true ]; then
              echo "🚀 开始同步多架构镜像..."
              docker buildx build \
                --platform "$platforms" \
                --output=type=image,name=$dest_image,push=true \
                --build-arg BASE_IMAGE=$src_image \
                - <<< "ARG BASE_IMAGE
                      FROM \$BASE_IMAGE"
              
              echo "🎉 成功同步: $dest_image"
              echo "📊 镜像摘要: ${LATEST_DIGEST:0:12}"
            fi
          done < $GITHUB_WORKSPACE/images.txt

          # 清理构建器
          docker buildx rm multiarch || true

      # 清理Docker资源
      - name: 清理资源
        run: |
          docker system prune -a -f
          docker builder prune -a -f