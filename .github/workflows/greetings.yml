name: Single-Platform Image Sync Fix

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */4 * * *'

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 登录到镜像仓库
      - name: 登录到 cnb 镜像仓库
        run: |
          docker login docker.cnb.cool -u cnb -p ${{ secrets.cnb }}

      - name: Sync Images
        run: |
          set -eo pipefail
          
          docker buildx create --name img_sync --use
          docker buildx inspect --bootstrap

          while IFS= read -r line; do
            [[ "$line" =~ ^#|^$ ]] && continue

            # 解析输入行
            src_image=$(echo "$line" | awk '{print $1}')
            dest_image=$(echo "$line" | awk '{print $2}')
            platforms=$(echo "$line" | awk '{$1=$2=""; print $0}' | xargs | tr ',' ' ' | sed 's/^/linux\//; s/ / linux\//g')
            
            echo "🔍 Processing: $src_image => $dest_image [Platforms: $platforms]"

            # 改进的manifest检查逻辑
            NEED_UPDATE=false
            if docker manifest inspect "$dest_image" &>/dev/null; then
              # 获取源镜像digest
              src_digest=$(docker inspect --format='{{.Id}}' "$src_image" 2>/dev/null || docker manifest inspect "$src_image" | jq -r '.config.digest')
              
              # 获取目标镜像digest
              dest_digest=$(docker inspect --format='{{.Id}}' "$dest_image" 2>/dev/null || docker manifest inspect "$dest_image" | jq -r '.config.digest')

              if [ "$src_digest" != "$dest_digest" ]; then
                NEED_UPDATE=true
                echo "🔄 Update needed (${dest_digest:0:12} → ${src_digest:0:12})"
              fi
            else
              NEED_UPDATE=true
              echo "🆕 Destination image doesn't exist"
            fi

            if [ "$NEED_UPDATE" = true ]; then
              echo "🚀 Syncing image..."
              
              # 更健壮的单平台同步方法
              platform_args=$(echo "$platforms" | tr ' ' ',')
              
              docker pull "$src_image" --platform "$platform_args"
              docker tag "$src_image" "$dest_image"
              docker push "$dest_image"
              
              # 可选：使用buildx的替代方案
              # docker buildx build \
              #   --platform "$platform_args" \
              #   --output=type=image,name=$dest_image,push=true \
              #   --cache-from=type=registry,ref=$src_image \
              #   - <<< "FROM $src_image"
              
              echo "🎉 Synced successfully: $dest_image"
            else
              echo "✅ Already up-to-date"
            fi
          done < "$GITHUB_WORKSPACE/images.txt"

          docker buildx rm img_sync || true
