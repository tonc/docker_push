name: Smart Multi-Arch Sync

on:
  workflow_dispatch:
  schedule:
    - cron: '* */3 * * *'


jobs:
  sync:
    runs-on: ubuntu-latest
    steps:

    # 增加可用磁盘空间
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:

        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'
        remove-haskell: 'true'
        # 如果空间还是不够用，可以把以下开启，清理出更多空间
        remove-android: 'true'
        remove-codeql: 'true'
        build-mount-path: '/var/lib/docker/'

    - name: Restart docker
      run: sudo service docker restart

    - name: 检出代码
      uses: actions/checkout@v4
      
    # 登录到 cnb
    - name: 登录到 cnb
      run:
          docker login docker.cnb.cool -u cnb -p ${{ secrets.cnb }}

    - name: Setup Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64,linux/arm/v7

    - name: Process Images
      run: |
        while IFS= read -r line; do
          # Skip comments/empty lines
          [[ "$line" =~ ^#|^$ ]] && continue

          # Parse input
          src_image=$(echo "$line" | awk '{print $1}')
          dest_image=$(echo "$line" | awk '{print $2}')
          platforms=$(echo "$line" | awk '{print $3}' | tr ',' ' ')

          echo "🔍 Processing: $src_image => $dest_image (${platforms// /,})"

          # Step 1: Pull multi-arch image
          docker pull --platform=$(echo "$platforms" | tr ' ',',') $src_image

          # Step 2: Push each arch with clear tagging
          for arch in $platforms; do
            arch_suffix=$(echo $arch | sed 's/\//-/g')  # arm/v7 => arm-v7
            temp_tag="${dest_image}-${arch_suffix}-temp"
            
            docker tag $src_image $temp_tag
            docker push $temp_tag
          done

          # Step 3: Create unified manifest
          manifest_cmd="docker manifest create ${dest_image}"
          for arch in $platforms; do
            arch_suffix=$(echo $arch | sed 's/\//-/g')
            manifest_cmd+=" --amend ${dest_image}-${arch_suffix}-temp"
          done
          eval $manifest_cmd

          # Step 4: Push final manifest
          docker manifest push $dest_image

          # Step 5: Cleanup temporary tags
          for arch in $platforms; do
            arch_suffix=$(echo $arch | sed 's/\//-/g')
            docker rmi ${dest_image}-${arch_suffix}-temp || true
          done

          echo "✅ Successfully pushed multi-arch: $dest_image"
        done < images.txt
