# name: Smart Multi-Arch Sync (Latest Only)

# on:
#   workflow_dispatch:
#   schedule:
#     - cron: '*/30 * * * *'  # 每半小时运行一次

# jobs:
#   sync:
#     runs-on: ubuntu-latest
#     steps:
#       - name: 检出代码
#         uses: actions/checkout@v4
      
#       # 登录到镜像仓库
#       - name: 登录到 cnb 镜像仓库
#         run: |
#           docker login docker.cnb.cool -u cnb -p ${{ secrets.cnb }}

#       # 设置 Buildx
#       - name: Setup Buildx
#         uses: docker/setup-buildx-action@v3
#         with:
#           platforms: linux/amd64,linux/arm64,linux/arm/v7

#       # 安装必要工具
#       - name: 安装 jq
#         run: sudo apt-get install -y jq

#       # 核心镜像同步逻辑
#       - name: 多架构镜像同步
#         run: |
#           set -eo pipefail
          
#           # 创建临时构建器
#           docker buildx create --name multiarch --use
#           docker buildx inspect --bootstrap

#           while IFS= read -r line; do
#             # 跳过注释和空行
#             [[ "$line" =~ ^#|^$ ]] && continue

#             # 解析输入行
#             src_image=$(echo "$line" | awk '{print $1}')
#             dest_image=$(echo "$line" | awk '{print $2}')
#             platforms=$(echo "$line" | awk -F'[ ,]+' '{print $3}' | tr ',' ' ')
            
#             echo "🔍 正在处理: $src_image => $dest_image [平台: $platforms]"

#             # 检查源镜像是否有更新
#             NEED_UPDATE=false
#             if ! LATEST_DIGEST=$(docker manifest inspect "$src_image" 2>/dev/null | jq -r '.config.digest'); then
#               echo "❌ 无法获取源镜像清单: $src_image"
#               continue
#             fi

#             # 检查目标镜像是否存在
#             if docker manifest inspect "$dest_image" &>/dev/null; then
#               CURRENT_DIGEST=$(docker manifest inspect "$dest_image" | jq -r '.config.digest')
#               if [ "$LATEST_DIGEST" != "$CURRENT_DIGEST" ]; then
#                 NEED_UPDATE=true
#                 echo "🔄 检测到更新: $src_image (旧: ${CURRENT_DIGEST:0:12} → 新: ${LATEST_DIGEST:0:12})"
#               else
#                 echo "✅ $dest_image 已是最新"
#                 continue
#               fi
#             else
#               NEED_UPDATE=true
#               echo "🆕 目标镜像不存在，将创建: $dest_image"
#             fi

#             if [ "$NEED_UPDATE" = true ]; then
#               echo "🚀 开始同步多架构镜像..."
#               docker buildx build \
#                 --platform "$platforms" \
#                 --output=type=image,name=$dest_image,push=true \
#                 --build-arg BASE_IMAGE=$src_image \
#                 - <<< "ARG BASE_IMAGE
#                       FROM \$BASE_IMAGE"
              
#               echo "🎉 成功同步: $dest_image"
#               echo "📊 镜像摘要: ${LATEST_DIGEST:0:12}"
#             fi
#           done < $GITHUB_WORKSPACE/images.txt

#           # 清理构建器
#           docker buildx rm multiarch || true

#       # 清理Docker资源
#       - name: 清理资源
#         run: |
#           docker system prune -a -f
#           docker builder prune -a -f


name: Multi-Arch Image Sync (Robust Version)

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # 每6小时运行一次

jobs:
  sync:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          install: true

      # 登录到镜像仓库
      - name: 登录到 cnb 镜像仓库
        run: |
          docker login docker.cnb.cool -u cnb -p ${{ secrets.cnb }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          docker buildx version
          docker info

      - name: Multi-platform image synchronization
        run: |
          set -eo pipefail

          # 创建专用构建器实例
          docker buildx create --name multiarch_sync --driver docker-container --platform linux/amd64,linux/arm64,linux/arm/v7 --use
          docker buildx inspect --bootstrap

          # 处理镜像列表
          while IFS= read -r line; do
            # 跳过注释和空行
            [[ "$line" =~ ^#|^$ ]] && continue

            # 解析输入行 (格式: 源镜像 目标镜像 平台列表)
            src_image=$(echo "$line" | awk '{print $1}')
            dest_image=$(echo "$line" | awk '{print $2}')
            platforms=$(echo "$line" | awk '{$1=$2=""; print $0}' | xargs | tr ',' ' ' | tr -s ' ')

            echo "🔍 Processing: $src_image => $dest_image [Platforms: $platforms]"

            # 获取源镜像清单
            if ! src_manifest=$(docker manifest inspect "$src_image" 2>/dev/null); then
              echo "❌ Failed to inspect source image: $src_image"
              continue
            fi

            # 检查是否需要更新
            NEED_UPDATE=false
            if docker manifest inspect "$dest_image" &>/dev/null; then
              # 比较每个平台的digest
              for platform in $platforms; do
                # 标准化平台标识符 (处理linux/arm/v7等格式)
                norm_platform=$(echo "$platform" | sed 's|linux/||; s|/|-|g')
                
                # 获取源镜像digest
                src_digest=$(echo "$src_manifest" | jq -r --arg plat "$norm_platform" '
                  .manifests[] | 
                  select(
                    (.platform.architecture + (.platform.variant? // "")) == $plat or
                    (.platform.os + "/" + .platform.architecture + (.platform.variant? // "" | "/" + .)) == $plat
                  ) | .digest')

                if [ -z "$src_digest" ]; then
                  echo "⚠️ Source image does not support platform: $platform"
                  continue
                fi

                # 获取目标镜像digest
                dst_digest=$(docker manifest inspect "$dest_image" | jq -r --arg plat "$norm_platform" '
                  .manifests[] | 
                  select(
                    (.platform.architecture + (.platform.variant? // "")) == $plat or
                    (.platform.os + "/" + .platform.architecture + (.platform.variant? // "" | "/" + .)) == $plat
                  ) | .digest')

                if [ "$src_digest" != "$dst_digest" ]; then
                  NEED_UPDATE=true
                  echo "🔄 Platform $platform needs update (${dst_digest:0:12} → ${src_digest:0:12})"
                fi
              done
            else
              NEED_UPDATE=true
              echo "🆕 Destination image does not exist"
            fi

            if [ "$NEED_UPDATE" = true ]; then
              echo "🚀 Syncing multi-platform image..."
              
              # 使用高效的registry-to-registry复制
              docker buildx build \
                --platform "$platforms" \
                --output=type=image,name=$dest_image,push=true \
                --cache-from=type=registry,ref=$src_image \
                --provenance=false \
                --sbom=false \
                - <<< "FROM $src_image"
              
              echo "🎉 Successfully synced: $dest_image"
              echo "📊 New digest: $(echo "$src_manifest" | jq -r '.config.digest' | cut -d: -f2 | head -c 12)"
            else
              echo "✅ All platforms are up-to-date"
            fi
          done < "$GITHUB_WORKSPACE/images.txt"

          # 清理构建器
          docker buildx rm multiarch_sync || true

      - name: Clean up
        run: |
          docker system prune -a -f --volumes
          docker builder prune -a -f